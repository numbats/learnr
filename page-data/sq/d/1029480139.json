{"data":{"site":{"siteMetadata":{"testTemplate":"success <- function(text) {\n    cat(paste(\"\\033[32m\", text, \"\\033[0m\", sep = \"\"))\n}\n\n.solution <- \"${solutionEscaped}\"\n\n${solution}\n\n${test}\ntryCatch({\n    test()\n}, error = function(e) {\n    cat(paste(\"\\033[31m\", e[1], \"\\033[0m\", sep = \"\"))\n})","juniper":{"repo":"numbats/learnr","branch":"binder","kernelType":"ir","lang":"r","debug":false}}},"allCode":{"edges":[{"node":{"name":"exc_01_03","code":"options(tidyverse.quiet = TRUE)\nlibrary(tidyverse)\n\nmtcars <- mtcars %>%\n  mutate(am = factor(am, levels = 0:1, labels = c(\"Automatic\", \"Manual\")))\n\n\n# Print the gear variable of mtcars\nmtcars$____\n\n# Assign the number of rows in mtcars to `n`\nn <- ____\n\n# Uncomment this to see the plot\n# ggplot(mtcars, aes(am, mpg)) + geom_violin()\n"}},{"node":{"name":"exc_01_04","code":"# Assign the product of 2 and 3 to x\nx <- ____\n\n# draw some plot\nlibrary(ggplot2)\nggplot(cars, aes(speed, dist)) +\n  geom_point()\n"}},{"node":{"name":"solution_01_03","code":"options(tidyverse.quiet = TRUE)\nlibrary(tidyverse)\n\nmtcars <- mtcars %>%\n  mutate(am = factor(am, levels = 0:1, labels = c(\"Automatic\", \"Manual\")))\n\n\n# Print the gear variable of mtcars\nmtcars$gear\n\n# Assign the number of rows in mtcars to `n`\nn <- nrow(mtcars)\n\n# Uncomment this to see the plot\n# ggplot(mtcars, aes(am, mpg)) + geom_violin()\n"}},{"node":{"name":"solution_01_04","code":"# Assign the product of 2 and 3 to x\nx <- 2 * 3\n\n"}},{"node":{"name":"test_01_03","code":"test <- function() {\n    # Here we can either check objects created in the solution code, or the\n    # string value of the solution, available as .solution. See the testTemplate\n    # in the meta.json for details.\n    if (n != nrow(mtcars)) {\n        stop(\"Are you getting the correct length?\")\n    }\n    if (!grepl(\"mtcars$gear\", .solution, fixed = TRUE)) {\n        stop(\"Are you printing the correct variable?\")\n    }\n\n    # This function is defined in the testTemplate\n    success(\"Well done!\")\n}\n"}},{"node":{"name":"test_01_04","code":"test <- function() {\n    # Here we can either check objects created in the solution code, or the\n    # string value of the solution, available as .solution. See the testTemplate\n    # in the meta.json for details.\n    if (x != 6) {\n        stop(\"Are you using the correct numbers and symbols?\")\n    }\n\n    # This function is defined in the testTemplate\n    success(\"Well done!\")\n}\n"}}]}}}