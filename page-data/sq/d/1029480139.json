{"data":{"site":{"siteMetadata":{"testTemplate":"success <- function(text) {\n    cat(paste(\"\\033[32m\", text, \"\\033[0m\", sep = \"\"))\n}\n\n.solution <- \"${solutionEscaped}\"\n\n${solution}\n\n${test}\ntryCatch({\n    test()\n}, error = function(e) {\n    cat(paste(\"\\033[31m\", e[1], \"\\033[0m\", sep = \"\"))\n})","juniper":{"repo":"numbats/learnr","branch":"binder","kernelType":"ir","lang":"r","debug":false}}},"allCode":{"edges":[{"node":{"name":"exc_02_01","code":"# Assign the sum of 1,3,5,7,9 to the variable x\nx <- _____\n\n# Assign the product of x and 3 to the variable y\ny <- _____\n\n"}},{"node":{"name":"exc_02_02","code":"# Change weather to be \"sunny\"\nweather <- \"rainy\"\n\n# Change brolly_needed to be \"FALSE\"\nbrolly_needed <- TRUE\n\n# Change temperature to be 27\ntemperature <- 13\n"}},{"node":{"name":"exc_02_06","code":"S <- matrix(c(1,0,0,1), byrow=TRUE, nrow=2)\nT <- matrix(c(2,2,4,3), byrow=TRUE, nrow=2)\n# Construct a matrix M by stacking S on top of T\nM <- _____\n\n# Select a sub-matrix of M with the data on the rows 1, 2, 3 and columns 2.\npart_of_M <- _____\n\n"}},{"node":{"name":"exc_02_07_01","code":"iris\n\n\n"}},{"node":{"name":"exc_02_07_02","code":"df <- ToothGrowth\n\n# Have a quick look at the first few observations of df\n\n\n"}},{"node":{"name":"exc_02_07_03","code":"symbol <- c('N','O','H','He','B','C','F','Ne','Li','Be')\nelement <- c('Nitrogen','Oxygen','Hydrogen','Helium','Boron','Carbon','Fluorine','Neon','Lithium','Beryllium')\nchemical_group <- c('Nonmetal','Nonmetal','Nonmetal','Noble Gas','Metalloid','Nonmetal','Halogen','Noble Gas','Alkali Metal','Alkaline Earth Metal')\natomic_no <- c(7,8,1,2,5,6,9,10,3,4)\n\nfirst_ten_elements <- _____\n\n"}},{"node":{"name":"exc_02_07_04","code":"\nsymbol <- c('N','O','H','He','B','C','F','Ne','Li','Be')\nelement <- c('Nitrogen','Oxygen','Hydrogen','Helium','Boron','Carbon','Fluorine','Neon','Lithium','Beryllium')\nchemical_group <- c('Nonmetal','Nonmetal','Nonmetal','Noble Gas','Metalloid','Nonmetal','Halogen','Noble Gas','Alkali Metal','Alkaline Earth Metal')\natomic_no <- c(7,8,1,2,5,6,9,10,3,4)\n\nfirst_ten_elements <- data.frame(symbol, element, chemical_group, atomic_no)\n\n# Use order() to create positions\npositions <- _____\n\n# Use positions to create a sort the first_ten_elements\nsorted_df <- _____\n\n"}},{"node":{"name":"exc_02_10_01","code":"\ncountries <- c('US', 'China','Japan', 'Germany','India')\nnominalGDP_trilion_2017 <- c(19.485, 12.238, 4.872, 3.693, 2.651)\npopulation_million_2017 <- c(325, 1421, 127, 82, 1338)\n\n\n# Write a for loop that takes the nominal GDP (in trillion) for each country in 2017 and divided it by the population (in million) in the same year\n# Assign the result to the variable my_result\nmy_result <- c(0,0,0,0,0)\nfor (i in 1:length(countries)) {\n  my_result[i] <- _____\n}\n\n"}},{"node":{"name":"exc_02_11_01","code":"# Create a function power_three()\npower_three <- _____\n# Use the function\npower_three(_____)\n\n"}},{"node":{"name":"exc_02_11_02","code":"# Write some code to roll a die\n\nroll_a_die <- _____\n\n"}},{"node":{"name":"exc_03_01","code":"\ndata(cars)\n\ntotal_dis <- cars %>%\n  mutate(total = dist*speed)\n\ntotal_dis %>% head()\n\n"}},{"node":{"name":"exc_03_02","code":"\ntotal_dis <- cars %>%\n  mutate(total = dist*sped)\n\ntotal_dis %>% head()\n\n"}},{"node":{"name":"exc_03_03","code":"mean(total_dis$total\n     \n     \n"}},{"node":{"name":"exc_04_01","code":"# Let's try read in a dataset \n# Just run this code and view the first six rows for this penguins dataset\n\npenguins <- read.csv(\"data/penguins.csv\")\n\nhead(penguins)\n\n"}},{"node":{"name":"exc_05_01","code":"# Let's try read in a dataset \n# Just run this code and view the first six rows for this penguins dataset\n\npenguins <- read.csv(\"data/penguins.csv\")\n\nhead(penguins)\n\n"}},{"node":{"name":"exc_05_02","code":"library(readr)\n# This is an example for read_csv function from readr package \n# You can put in an inline csv file for the read_csv function like this \n\nread_csv(\"x,y,z,\n         1,2,3,\n         4,5,6\")\n\n"}},{"node":{"name":"exc_05_03","code":"library(readr)\n# This is an example for read_csv function from readr package \n# You can put in an inline csv file for the read_csv function like this \n\nread_csv(\"x,y,z,\n         1,2,3,\n         4,5,6\")\n\n"}},{"node":{"name":"exc_05_03_01","code":"\nnew_iris <- iris %>% \n\n"}},{"node":{"name":"exc_05_04","code":"# Let's try use read_csv to import penguins dataset\n\nlibrary(readr)\n\npenguins_readr <- read_csv(\"data/penguins.csv\")\n\nhead(penguins_readr)\n\n"}},{"node":{"name":"exc_06_03_01","code":"\nnew_iris <- iris %>% \n\n"}},{"node":{"name":"exc_05_05","code":"# Let's try use read_csv to import the Australian Fires dataset from Github\n# The url for this file is 'https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-01-07/rainfall.csv'\n\nlibrary(readr)\n\nrainfall<- read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-01-07/rainfall.csv')\n\nhead(rainfall)\n\n"}},{"node":{"name":"exc_06_03_02","code":"\n\n"}},{"node":{"name":"exc_06_05_01","code":"\n"}},{"node":{"name":"exc_06_05_02","code":"\n"}},{"node":{"name":"solution_02_06","code":"S <- matrix(c(1,0,0,1), byrow=TRUE, nrow=2)\nT <- matrix(c(2,2,4,3), byrow=TRUE, nrow=2)\n# Construct a matrix M by stacking S on top of T\nM <- rbind(S,T)\n\n# Select a sub-matrix of M with the data on the rows 1, 2, 3 and columns 2.\npart_of_M <- M[1:3,2]\n\n"}},{"node":{"name":"solution_02_07_01","code":"iris\n\n\n"}},{"node":{"name":"solution_02_07_02","code":"df <- ToothGrowth\n\n# Have a quick look at the first few observations of df\n\n\n"}},{"node":{"name":"solution_02_07_03","code":"symbol <- c('N','O','H','He','B','C','F','Ne','Li','Be')\nelement <- c('Nitrogen','Oxygen','Hydrogen','Helium','Boron','Carbon','Fluorine','Neon','Lithium','Beryllium')\nchemical_group <- c('Nonmetal','Nonmetal','Nonmetal','Noble Gas','Metalloid','Nonmetal','Halogen','Noble Gas','Alkali Metal','Alkaline Earth Metal')\natomic_no <- c(7,8,1,2,5,6,9,10,3,4)\n\nfirst_ten_elements <- data.frame(symbol, element, chemical_group, atomic_no)\n\n"}},{"node":{"name":"solution_02_07_04","code":"\nsymbol <- c('N','O','H','He','B','C','F','Ne','Li','Be')\nelement <- c('Nitrogen','Oxygen','Hydrogen','Helium','Boron','Carbon','Fluorine','Neon','Lithium','Beryllium')\nchemical_group <- c('Nonmetal','Nonmetal','Nonmetal','Noble Gas','Metalloid','Nonmetal','Halogen','Noble Gas','Alkali Metal','Alkaline Earth Metal')\natomic_no <- c(7,8,1,2,5,6,9,10,3,4)\n\nfirst_ten_elements <- data.frame(symbol, element, chemical_group, atomic_no)\n\n# Use order() to create positions\npositions <- order(first_ten_elements$atomic_no)\n\n# Use positions to create a sort the first_ten_elements\nsorted_df <- first_ten_elements[positions, ]\n\n"}},{"node":{"name":"solution_02_10_01","code":"\ncountries <- c('US', 'China','Japan', 'Germany','India')\nnominalGDP_trilion_2017 <- c(19.485, 12.238, 4.872, 3.693, 2.651)\npopulation_million_2017 <- c(325, 1421, 127, 82, 1338)\n\n\n# Write a for loop that takes the nominal GDP (in trillion) for each country in 2017 and divided it by the population (in million) in the same year\n# Assign the result to the variable my_result\nmy_result <- c(0,0,0,0,0)\nfor (i in 1:length(countries)) {\n  my_result[i] <- nominalGDP_trilion_2017[i]/population_million_2017[i]\n}\n\n"}},{"node":{"name":"solution_02_02","code":"# Change weather to be \"sunny\"\nweather <- \"rainy\"\n\n# Change brolly_needed to be \"FALSE\"\nbrolly_needed <- TRUE\n\n# Change temperature to be 27\ntemperature <- 13\n"}},{"node":{"name":"solution_02_11_01","code":"# Create a function power_three()\npower_three <- function(arg){arg*arg*arg}\n# Use the function\npower_three( )\n\n"}},{"node":{"name":"solution_03_01","code":"\ndata(cars)\n\ntotal_dis <- cars %>%\n  mutate(total = dist*speed)\n\ntotal_dis %>% head()\n\n"}},{"node":{"name":"solution_02_11_02","code":"# Write some code to roll a die\n\nroll_a_die <- function(){sample(1:6, size = 1)}\n\n"}},{"node":{"name":"solution_03_02","code":"\ntotal_dis <- cars %>%\n  mutate(total = dist*sped)\n\ntotal_dis %>% head()\n\n"}},{"node":{"name":"solution_03_03","code":"mean(total_dis$total\n     \n     \n"}},{"node":{"name":"solution_04_01","code":"# Let's try read in a dataset \n# Just run this code and view the first six rows for this penguins dataset\n\npenguins <- read.csv(\"data/penguins.csv\")\n\nhead(penguins)\n\n"}},{"node":{"name":"solution_05_01","code":"# Let's try read in a dataset \n# Just run this code and view the first six rows for this penguins dataset\n\npenguins <- read.csv(\"data/penguins.csv\")\n\nhead(penguins)\n\n"}},{"node":{"name":"solution_05_02","code":"library(readr)\n# This is an example for read_csv function from readr package \n# You can put in an inline csv file for the read_csv function like this \n\nread_csv(\"x,y,z,\n         1,2,3,\n         4,5,6\")\n\n"}},{"node":{"name":"solution_05_03","code":"library(readr)\n# This is an example for read_csv function from readr package \n# You can put in an inline csv file for the read_csv function like this \n\nread_csv(\"x,y,z,\n         1,2,3,\n         4,5,6\")\n\n"}},{"node":{"name":"solution_05_03_01","code":"\nnew_iris <- iris %>% \n\n"}},{"node":{"name":"solution_05_04","code":"# Let's try use read_csv to import penguins dataset\n\nlibrary(readr)\n\npenguins_readr <- read_csv(\"data/penguins.csv\")\n\nhead(penguins_readr)\n\n"}},{"node":{"name":"solution_05_05","code":"# Let's try use read_csv to import the Australian Fires dataset from Github\n# The url for this file is 'https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-01-07/rainfall.csv'\n\nlibrary(readr)\n\nrainfall<- read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-01-07/rainfall.csv')\n\nhead(rainfall)\n\n"}},{"node":{"name":"solution_06_03_01","code":"\nnew_iris <- iris %>% \n\n"}},{"node":{"name":"solution_06_03_02","code":"\n\n"}},{"node":{"name":"solution_06_05_01","code":"\n"}},{"node":{"name":"solution_06_05_02","code":"\n"}},{"node":{"name":"solution_example","code":"mtcars %>% \n  ggplot(aes(x = factor(cyl), y = mpg)) + \n  geom_boxplot()\n"}},{"node":{"name":"test_02_01","code":"library(testthat)\n\ntest <- function() {\n    if (x != 25) {\n        stop(\"Are you using the correct numbers and symbols? Have you try the hint?\")\n    }\n    if (y != 75) {\n      stop(\"Are you using the correct numbers and symbols? Have you try the hint?\")\n    }\n    # This function is defined in the testTemplate\n    success(\"Well done!\")\n}\n\n"}},{"node":{"name":"test_02_02","code":"library(testthat)\n\ntest <- function() {\n    if (weather != \"sunny\") {\n        stop(\"Have you spelt the string correctly? Have you try the hint?\")\n    }\n    if (brolly_needed != FALSE) {\n      stop(\"Have you spelt the logical value correctly? Note that logical values should be all capital letter (i.e. `TRUE` not `true`).\")\n    }\n    if (temperature != 27) {\n      stop(\"Have you assign the numeric correctly?\")\n    }\n    # This function is defined in the testTemplate\n    success(\"Well done!\")\n}\n\n\n"}},{"node":{"name":"test_02_06","code":"library(testthat)\n\ntest <- function() {\n    S <- matrix(c(1,0,0,1), byrow=TRUE, nrow=2)\n    T <- matrix(c(2,2,4,3), byrow=TRUE, nrow=2)\n    if (M != rbind(S,T)) {\n        stop(\"This is incorrect. Are you using the function that we have introduced? Try the Hint!\")\n    }\n    if (part_of_M != M[1:3,2]) {\n      stop(\"Have you got the indexing right? Try the Hint!\")\n    }\n    # This function is defined in the testTemplate\n    success(\"Well done! You have mastered the basics of operating on matrices using R.\")\n}\n\n\n"}},{"node":{"name":"test_02_07_01","code":"library(testthat)\ntest <-function(){\n  success(\"Well done!\")\n}\n\n\n"}},{"node":{"name":"test_02_07_02","code":"library(testthat)\n\ntest <-function(){\n  success(\"Well done!\")\n}\n\n\n"}},{"node":{"name":"test_02_07_03","code":"library(testthat)\n\ntest <- function() {\n    symbol <- c('N','O','H','He','B','C','F','Ne','Li','Be')\n    element <- c('Nitrogen','Oxygen','Hydrogen','Helium','Boron','Carbon','Fluorine','Neon','Lithium','Beryllium')\n    chemical_group <- c('Nonmetal','Nonmetal','Nonmetal','Noble Gas','Metalloid','Nonmetal','Halogen','Noble Gas','Alkali Metal','Alkaline Earth Metal')\n    atomic_no <- c(7,8,1,2,5,6,9,10,3,4)\n    if (first_ten_elements != data.frame(symbol, element, chemical_group, atomic_no)){\n      stop(\"Did you follow the order of columns as stated in the instruction?\" Try again.)\n    }\n    success(\"Well done!\")\n}\n\n\n"}},{"node":{"name":"test_02_07_04","code":"library(testthat)\n  \ntest <- function() {\n\n    symbol <- c('N','O','H','He','B','C','F','Ne','Li','Be')\n    element <- c('Nitrogen','Oxygen','Hydrogen','Helium','Boron','Carbon','Fluorine','Neon','Lithium','Beryllium')\n    chemical_group <- c('Nonmetal','Nonmetal','Nonmetal','Noble Gas','Metalloid','Nonmetal','Halogen','Noble Gas','Alkali Metal','Alkaline Earth Metal')\n    atomic_no <- c(7,8,1,2,5,6,9,10,3,4)\n    first_ten_elements <- data.frame(symbol, element, chemical_group, atomic_no)\n    if (sorted_df != first_ten_elements[order(first_ten_elements$atomic_no), ]){\n      stop(\"Did you follow the order of columns as stated in the instruction?\" Try again.)\n    }\n    success(\"Well done!\")\n}\n\n\n"}},{"node":{"name":"test_02_10_01","code":"library(testthat)\n  \ntest <- function() {\n  if (abs(my_result[5] - 0.00198) >= 1e-4){\n    stop(\"Try again.\")\n  }\n  success(\"Well done!\")\n}\n\n\n"}},{"node":{"name":"test_02_11_01","code":"library(testthat)\n\ntest <- function() {\n    if (power_three(20) != 20^3){\n      stop(\"Did you correctly define the function power_three()? Check the function body. Are you taking the input argument to the power three?\")\n    }\n    success(\"Well done!\")\n}\n\n\n"}},{"node":{"name":"test_02_11_02","code":"library(testthat)\n  \ntest <- function() {\n    if ((class(roll_a_die()) != \"integer\")|(roll_a_die()> 6)|(roll_a_die()<1)) {\n      stop(\"Is your function returning integers from 1 to 6 ? Check the body of the function.\")\n    }\n    success(\"Well done!\")\n}\n\n\n\n"}},{"node":{"name":"test_03_01","code":"library(testthat)\ntest <- function() {\nexpect_true(\n  \"dplyr\" %in% loadedNamespaces())\nexpect_true(\n  \"tidyverse\" %in% loadedNamespaces())\n  success(\"Well done!\")\n}  \n"}},{"node":{"name":"test_03_02","code":"library(testthat)\n"}},{"node":{"name":"test_03_03","code":"library(testthat)\n"}},{"node":{"name":"test_04_01","code":"library(testthat)\n"}},{"node":{"name":"test_05_01","code":"library(testthat)\n"}},{"node":{"name":"test_05_02","code":"library(testthat)\n"}},{"node":{"name":"test_05_03","code":"library(testthat)\n"}},{"node":{"name":"test_05_03_01","code":"library(testthat)\n\ntest <- function() {\n    if (nrow(new_iris) != 117) {\n        stop(\"Are you filtering the petal area correctly?\")\n    }\n    success(\"Well done!\")\n}\n\ntest()\n\n"}},{"node":{"name":"test_05_04","code":"library(testthat)\n"}},{"node":{"name":"test_05_05","code":"library(testthat)\n"}},{"node":{"name":"test_06_03_01","code":"library(testthat)\n\ntest <- function() {\n    if (nrow(new_iris) != 117) {\n        stop(\"Are you filtering the petal area correctly?\")\n    }\n    success(\"Well done!\")\n}\n\ntest()\n\n"}},{"node":{"name":"test_06_03_02","code":"library(testthat)\n  \n"}},{"node":{"name":"test_06_05_02","code":"library(testthat)\n\n"}},{"node":{"name":"test_06_05_01","code":"library(testthat)\n\n"}},{"node":{"name":"test_example","code":"library(testthat)\n"}},{"node":{"name":"solution_02_01","code":"# Assign the sum of 1,3,5,7,9 to the variable x\nx <- 1+3+5+7+9\n\n# Assign the product of x and 3 to the variable y\ny <- x*3\n\n"}},{"node":{"name":"exc_example","code":"mtcars %>% \n  ggplot(aes(x = factor(cyl), y = mpg)) + \n  geom______()\n"}},{"node":{"name":"exc_01_03","code":"options(tidyverse.quiet = TRUE)\nlibrary(tidyverse)\n\nmtcars <- mtcars %>%\n  mutate(am = factor(am, levels = 0:1, labels = c(\"Automatic\", \"Manual\")))\n\n\n# Print the gear variable of mtcars\nmtcars$____\n\n# Assign the number of rows in mtcars to `n`\nn <- ____\n\n# Uncomment this to see the plot\n# ggplot(mtcars, aes(am, mpg)) + geom_violin()\n"}},{"node":{"name":"exc_01_04","code":"# Assign the product of 2 and 3 to x\nx <- ____\n\n# draw some plot\nlibrary(ggplot2)\nggplot(cars, aes(speed, dist)) +\n  geom_point()\n"}},{"node":{"name":"exc_02_01","code":"# Assign the sum of 1,3,5,7,9 to the variable x\nx <- _____\n\n# Assign the product of x and 3 to the variable y\ny <- _____\n\n"}},{"node":{"name":"exc_02_02","code":"# Change weather to be \"sunny\"\nweather <- \"rainy\"\n\n# Change brolly_needed to be \"FALSE\"\nbrolly_needed <- TRUE\n\n# Change temperature to be 27\ntemperature <- 13\n"}},{"node":{"name":"exc_02_06","code":"S = matrix(c(1,0,0,1), byrow=TRUE, nrow=2)\nT = matrix(c(2,2,4,3), byrow=TRUE, nrow=2)\n# Construct a matrix M by stacking S on top of T\nM <- _____\n\n# Select a sub-matrix of M with the data on the rows 1, 2, 3 and columns 2.\npart_of_M <- _____\n\n"}},{"node":{"name":"exc_02_07_01","code":"data(\"iris\")\n"}},{"node":{"name":"exc_02_07_02","code":"df = data(\"ToothGrowth\")\n\n"}},{"node":{"name":"exc_02_07_03","code":"symbol <- c('N','O','H','He','B','C','F','Ne','Li','Be')\nelement <- c('Nitrogen','Oxygen','Hydrogen','Helium','Boron','Carbon','Fluorine','Neon','Lithium','Beryllium')\nchemical_group <- c('Nonmetal','Nonmetal','Nonmetal','Noble Gas','Metalloid','Nonmetal','Halogen','Noble Gas','Alkali Metal','Alkaline Earth Metal')\natomic_no <- c(7,8,1,2,5,6,9,10,3,4)\n\nfirst_ten_elements <- _____\n\n"}},{"node":{"name":"exc_02_07_04","code":"\nsymbol <- c('N','O','H','He','B','C','F','Ne','Li','Be')\nelement <- c('Nitrogen','Oxygen','Hydrogen','Helium','Boron','Carbon','Fluorine','Neon','Lithium','Beryllium')\nchemical_group <- c('Nonmetal','Nonmetal','Nonmetal','Noble Gas','Metalloid','Nonmetal','Halogen','Noble Gas','Alkali Metal','Alkaline Earth Metal')\natomic_no <- c(7,8,1,2,5,6,9,10,3,4)\n\nfirst_ten_elements <- data.frame(symbol, element, chemical_group, atomic_no)\n\n# Use order() to create positions\npositions <- _____\n\n# Use positions to create a sort the first_ten_elements\nsorted_df <- _____\n\n"}},{"node":{"name":"exc_02_10_01","code":"\ncountries <- c('US', 'China','Japan', 'Germany','India')\nnominalGDP_trilion_2017 <- c(19.485, 12.238, 4.872, 3.693, 2.651)\npopulation_million_2017 <- c(325, 1421, 127, 82, 1338)\n\n\n# Write a for loop that takes the nominal GDP (in trillion) for each country in 2017 and divided it by the population (in million) in the same year\n# Assign the result to the variable my_result\nmy_result <- c(0,0,0,0)\nfor (i in 1:length(countries)) {\n  my_result[i] <- _____\n}\n\n"}},{"node":{"name":"exc_02_11_01","code":"# Create a function power_three()\npower_three <- _____\n# Use the function\npower_three(_____)\n\n"}},{"node":{"name":"exc_02_11_02","code":"# Write some code to roll a die\n\nroll_a_die <- _____\n\n"}},{"node":{"name":"exc_06_05A","code":"library(ggplot2)\ndata(BudgetFood, package = \"Ecdat\")\n\nggplot(data = _____, \n       mapping = aes(x = _____, \n                     y = _____)) +\n  geom______()\n\n"}},{"node":{"name":"exc_06_05B","code":"library(ggplot2)\ndata(BudgetFood, package = \"Ecdat\")\n\nggplot(data = _____, \n       mapping = aes(x = _____, \n                     y = _____)) +\n  geom______()\n\n"}},{"node":{"name":"exc_06_05C","code":"library(ggplot2)\ndata(BudgetFood, package = \"Ecdat\")\n\nggplot(data = _____, \n       mapping = aes(x = _____, \n                     y = _____)) +\n  geom______()\n\n"}},{"node":{"name":"exc_06_05D","code":"library(ggplot2)\ndata(BudgetFood, package = \"Ecdat\")\n\nggplot(data = _____, \n       mapping = aes(x = _____, \n                     y = _____)) +\n  geom______()\n\n"}},{"node":{"name":"exc_06_05E","code":"library(ggplot2)\ndata(BudgetFood, package = \"Ecdat\")\n\nggplot(data = _____, \n       mapping = aes(x = _____)) +\n  geom______(binwidth = 0.001)\n\n"}},{"node":{"name":"exc_06_05F","code":"library(ggplot2)\ndata(BudgetFood, package = \"Ecdat\")\n\nggplot(data = _____, \n       mapping = aes(x = _____))  +\n  geom_density(aes(y = _____))\n\n"}},{"node":{"name":"exc_06_06B","code":"suppressPackageStartupMessages({\n  library(ggplot2)\n  library(Ecdat)\n})\n\nggplot(data = _____, \n       mapping = aes(x = _____,\n                     y = _____)) +\n  geom______(_____) +\n  geom______(_____ = 0.1) \n\n"}},{"node":{"name":"exc_06_06C","code":"suppressPackageStartupMessages({\n  library(ggplot2)\n  library(Ecdat)\n})\n\nggplot(data = _____, \n       mapping = aes(x = _____,\n                     y = _____)) +\n  geom______() +\n  geom______(color = \"red\",\n                  method = loess,\n                  formula = y ~ x)\n\n"}},{"node":{"name":"exc_06_06D","code":"suppressPackageStartupMessages({\n  library(ggplot2)\n  library(Ecdat)\n})\n\nggplot(data = _____, \n       mapping = aes(x = _____)) +\n  geom______() +\n  geom______(aes(label = _____),\n                 vjust = -0.3,\n                 stat = _____)\n\n"}},{"node":{"name":"exc_06_06E","code":"suppressPackageStartupMessages({\n  library(tidyverse)\n  library(Ecdat)\n})\n\ndat <- BudgetFood %>% \n  filter(!is.na(sex)) %>% \n  group_by(town, sex) %>% \n  summarise(totexp = mean(totexp))\n\n_____ +\n  geom______(data = subset(dat, sex==\"woman\"),\n               aes(x = _____,\n                   y = _____,\n                  _____)) +\n  geom______(data = subset(dat, sex==\"man\"),\n               aes(x = _____,\n                   y = _____,\n                  _____))\n\n"}},{"node":{"name":"exc_06_07A","code":"library(ggplot2)\ndata(BudgetFood, package = \"Ecdat\")\n\nggplot(data = _____, \n       mapping = aes(x = _____)) +\n  geom______(aes(y = after_stat(density))) +\n  geom______(color = \"red\")\n\n"}},{"node":{"name":"exc_06_07B","code":"library(ggplot2)\ndata(BudgetFood, package = \"Ecdat\")\n\nggplot(data = _____, \n       mapping = aes(x = _____,\n                     y = _____)) +\n  geom______(_____) +\n  geom______(_____ = 0.1) \n\n"}},{"node":{"name":"exc_06_07C","code":"library(ggplot2)\ndata(BudgetFood, package = \"Ecdat\")\n\nggplot(data = _____, \n       mapping = aes(x = _____,\n                     y = _____)) +\n  geom______() +\n  geom______(color = \"red\",\n                  method = loess,\n                  formula = y ~ x)\n\n"}},{"node":{"name":"exc_06_07D","code":"library(ggplot2)\ndata(BudgetFood, package = \"Ecdat\")\n\nggplot(data = _____, \n       mapping = aes(x = _____)) +\n  geom______() +\n  geom______(aes(label = _____),\n                 vjust = -0.3,\n                 stat = _____)\n\n"}},{"node":{"name":"exc_06_07E","code":"library(tidyverse)\ndata(BudgetFood, package = \"Ecdat\")\n\ndat <- BudgetFood %>% \n  filter(!is.na(sex)) %>% \n  group_by(town, sex) %>% \n  summarise(totexp = mean(totexp))\n\n_____ +\n  geom______(data = filter(dat, sex==\"woman\"),\n               aes(x = _____,\n                   y = _____,\n                  _____)) +\n  geom______(data = subset(dat, sex==\"man\"),\n               aes(x = _____,\n                   y = _____,\n                  _____))\n\n"}},{"node":{"name":"exc_06_09A","code":"library(ggplot2)\ndata(BudgetFood, package = \"Ecdat\")\n\n\n\nggplot(data = subset(BudgetFood, !is.na(sex)), \n       mapping = aes(x = sex,\n                     y = age)) +\n  geom_violin(aes(fill = sex)) + \n  ______manual(values = c(\"violet\", \"royalblue\"))\n  \n\n"}},{"node":{"name":"exc_06_09B","code":"library(ggplot2)\ndata(BudgetFood, package = \"Ecdat\")\n\n\nggplot(data = subset(BudgetFood, !is.na(sex)), \n       mapping = aes(x = totexp,\n                     fill = sex)) +\n  geom_histogram(bins = 40,\n                 aes(color = sex)) + \n  ______log10() +\n  ______discrete() +\n  ______brewer(palette = 10)\n  \n\n"}},{"node":{"name":"exc_06_11A","code":"library(tidyverse)\ndata(BudgetFood, package = \"Ecdat\")\n\nggplot(BudgetFood, aes(x = _____)) + \n  geom_histogram(data = _____,\n                 fill = \"grey\", binwidth = 1,\n                 aes(y = after_stat(density))) +\n  geom_histogram(aes(y = after_stat(density)),\n                 binwidth = 1) +\n  geom_density(color = \"red\") +\n  facet______\n  \n"}},{"node":{"name":"exc_06_11B","code":"library(tidyverse)\ndata(BudgetFood, package = \"Ecdat\")\n\nggplot(subset(BudgetFood, !is.na(sex)), aes(age)) +\n  geom_histogram(aes(y = _____)) +\n  geom_text(x = 35, y = 0.035, \n            data = function(.data) .data %>% \n              group_by(sex, town) %>% \n              count(),\n            aes(label = n)) +\n  facet______\n\n"}},{"node":{"name":"exc_06_11C","code":"library(tidyverse)\nlibrary(_____)\ndata(BudgetFood, package = \"Ecdat\")\n\n\ng1 <- ggplot(BudgetFood, \n             aes(factor(size), wfood, color = sex)) +\n  geom_boxplot() \n\ng2 <- ggplot(BudgetFood, \n             aes(factor(size), totexp, color = sex)) +\n  geom_boxplot() + \n  scale_y_log10()\n\n# combine the plot as one figure \n_____ + plot_layout(guides = \"collect\")\n\n"}},{"node":{"name":"exc_06_13A","code":"library(tidyverse)\ndata(BudgetFood, package = \"Ecdat\")\n\nggplot(BudgetFood, aes(x = age)) + \n  geom_histogram(aes(y = after_stat(density)),\n                 binwidth = 1) +\n  geom_density(color = \"red\") +\n  facet_wrap(~town, labeller = label_both) +\n  labs(x = \"Age\", y = \"Density\", title = \"Age distribution by town size\") +\n  theme(text = _____(size = 14, family = \"mono\"),\n        plot.background = _____(fill = \"grey80\"),\n        _____ = element_rect(fill = \"black\"),\n        _____ = element_text(color = \"white\"),\n        panel.background = _____(fill = \"white\",\n                                        color = \"black\"),\n        panel.grid = element_blank())\n\n"}},{"node":{"name":"exc_07_02A","code":"data(Cigarette, package = \"Ecdat\")\n\nfit <- lm(_____, data = Cigarette)\n  \nRSS <- _____\nbeta0 <- _____\nbeta1 <- _____\n\n"}},{"node":{"name":"exc_07_04A","code":"data(Cigarette, package = \"Ecdat\")\n\nfit <- lm(_____, data = Cigarette)\n  \nRSS <- _____\nbeta0 <- _____\nbeta1 <- _____\n\n"}},{"node":{"name":"exc_07_06A","code":"data(Cigarette, package = \"Ecdat\")\n\nfit <- lm(_____, data = Cigarette)\n  \nbetas <- _____\nbetas\n\n"}},{"node":{"name":"solution_01_03","code":"options(tidyverse.quiet = TRUE)\nlibrary(tidyverse)\n\nmtcars <- mtcars %>%\n  mutate(am = factor(am, levels = 0:1, labels = c(\"Automatic\", \"Manual\")))\n\n\n# Print the gear variable of mtcars\nmtcars$gear\n\n# Assign the number of rows in mtcars to `n`\nn <- nrow(mtcars)\n\n# Uncomment this to see the plot\n# ggplot(mtcars, aes(am, mpg)) + geom_violin()\n"}},{"node":{"name":"solution_01_04","code":"# Assign the product of 2 and 3 to x\nx <- 2 * 3\n\n"}},{"node":{"name":"solution_02_01","code":"# Assign the sum of 1,3,5,7,9 to the variable x\nx <- 1+3+5+7+9\n\n# Assign the product of x and 3 to the variable y\ny <- x*3\n\n"}},{"node":{"name":"solution_02_02","code":"# Change weather to be \"sunny\"\nweather <- \"rainy\"\n\n# Change brolly_needed to be \"FALSE\"\nbrolly_needed <- TRUE\n\n# Change temperature to be 27\ntemperature <- 13\n"}},{"node":{"name":"solution_02_06","code":"S = matrix(c(1,0,0,1), byrow=TRUE, nrow=2)\nT = matrix(c(2,2,4,3), byrow=TRUE, nrow=2)\n# Construct a matrix M by stacking S on top of T\nM <- rbind(S,T)\n\n# Select a sub-matrix of M with the data on the rows 1, 2, 3 and columns 2.\npart_of_M <- M[1:3,2]\n\n"}},{"node":{"name":"solution_02_07_01","code":"data(\"iris\")\n"}},{"node":{"name":"solution_02_07_02","code":"df = data(\"ToothGrowth\")\n\n"}},{"node":{"name":"solution_02_07_03","code":"symbol <- c('N','O','H','He','B','C','F','Ne','Li','Be')\nelement <- c('Nitrogen','Oxygen','Hydrogen','Helium','Boron','Carbon','Fluorine','Neon','Lithium','Beryllium')\nchemical_group <- c('Nonmetal','Nonmetal','Nonmetal','Noble Gas','Metalloid','Nonmetal','Halogen','Noble Gas','Alkali Metal','Alkaline Earth Metal')\natomic_no <- c(7,8,1,2,5,6,9,10,3,4)\n\nfirst_ten_elements <- <data.frame(symbol, element, chemical_group, atomic_no)>\n\n"}},{"node":{"name":"solution_02_07_04","code":"\nsymbol <- c('N','O','H','He','B','C','F','Ne','Li','Be')\nelement <- c('Nitrogen','Oxygen','Hydrogen','Helium','Boron','Carbon','Fluorine','Neon','Lithium','Beryllium')\nchemical_group <- c('Nonmetal','Nonmetal','Nonmetal','Noble Gas','Metalloid','Nonmetal','Halogen','Noble Gas','Alkali Metal','Alkaline Earth Metal')\natomic_no <- c(7,8,1,2,5,6,9,10,3,4)\n\nfirst_ten_elements <- data.frame(symbol, element, chemical_group, atomic_no)\n\n# Use order() to create positions\npositions <- order(first_ten_elements$atomic_no)\n\n# Use positions to create a sort the first_ten_elements\nsorted_df <- first_ten_elements[positions, ]\n\n"}},{"node":{"name":"solution_02_10_01","code":"\ncountries <- c('US', 'China','Japan', 'Germany','India')\nnominalGDP_trilion_2017 <- c(19.485, 12.238, 4.872, 3.693, 2.651)\npopulation_million_2017 <- c(325, 1421, 127, 82, 1338)\n\n\n# Write a for loop that takes the nominal GDP (in trillion) for each country in 2017 and divided it by the population (in million) in the same year\n# Assign the result to the variable my_result\nmy_result <- c(0,0,0,0)\nfor (i in 1:length(countries)) {\n  my_result[i] <- nominalGDP_trilion_2017[i]/population_million_2017[i]\n}\n\n"}},{"node":{"name":"solution_02_11_01","code":"# Create a function power_three()\npower_three <- function(arg){arg*arg*arg}\n# Use the function\npower_three( )\n\n"}},{"node":{"name":"solution_02_11_02","code":"# Write some code to roll a die\n\nroll_a_die <- function(){sample(1:6, size = 1)}\n\n"}},{"node":{"name":"solution_06_05A","code":"library(ggplot2)\ndata(BudgetFood, package = \"Ecdat\")\n\nggplot(data = BudgetFood, \n       mapping = aes(x = size, \n                     y = totexp)) +\n  geom_point()\n\n"}},{"node":{"name":"solution_06_05B","code":"library(ggplot2)\ndata(BudgetFood, package = \"Ecdat\")\n\nggplot(data = BudgetFood, \n       mapping = aes(x = size, \n                     y = totexp)) +\n  geom_hex()\n\n"}},{"node":{"name":"solution_06_05C","code":"library(ggplot2)\ndata(BudgetFood, package = \"Ecdat\")\n\nggplot(data = BudgetFood, \n       mapping = aes(x = sex, \n                     y = age)) +\n  geom_boxplot()\n\n"}},{"node":{"name":"solution_06_05D","code":"library(ggplot2)\ndata(BudgetFood, package = \"Ecdat\")\n\nggplot(data = BudgetFood, \n       mapping = aes(x = factor(town), \n                     y = totexp)) +\n  geom_violin()\n\n"}},{"node":{"name":"solution_06_05E","code":"library(ggplot2)\ndata(BudgetFood, package = \"Ecdat\")\n\nggplot(data = BudgetFood, \n       mapping = aes(x = wfood)) +\n  geom_histogram(binwidth = 0.001)\n\n"}},{"node":{"name":"solution_06_05F","code":"library(ggplot2)\ndata(BudgetFood, package = \"Ecdat\")\n\nggplot(data = BudgetFood, \n       mapping = aes(x = wfood))  +\n  geom_density(aes(y = after_stat(count)))\n\n"}},{"node":{"name":"solution_06_06B","code":"suppressPackageStartupMessages({\n  library(ggplot2)\n  library(Ecdat)\n})\n\nggplot(data = subset(BudgetFood, !is.na(sex)), \n       mapping = aes(x = sex,\n                     y = age)) +\n  geom_violin(aes(fill = sex)) +\n  geom_boxplot(width = 0.1) \n\n"}},{"node":{"name":"solution_06_06C","code":"suppressPackageStartupMessages({\n  library(ggplot2)\n  library(Ecdat)\n})\n\nggplot(data = subset(BudgetFood, size < 30), \n       mapping = aes(x = size,\n                     y = totexp)) +\n  geom_point() +\n  geom_smooth(color = \"red\",\n                  method = loess,\n                  formula = y ~ x)\n\n"}},{"node":{"name":"solution_06_06D","code":"suppressPackageStartupMessages({\n  library(ggplot2)\n  library(Ecdat)\n})\n\nggplot(data = subset(BudgetFood, !is.na(sex)), \n       mapping = aes(x = sex)) +\n  geom_bar() +\n  geom_text(aes(label = after_stat(count)),\n                 vjust = -0.3,\n                 stat = \"count\")\n\n"}},{"node":{"name":"solution_06_06E","code":"suppressPackageStartupMessages({\n  library(tidyverse)\n  library(Ecdat)\n})\n\ndat <- BudgetFood %>% \n  filter(!is.na(sex)) %>% \n  group_by(town, sex) %>% \n  summarise(totexp = mean(totexp))\n\nggplot() +\n  geom_col(data = subset(dat, sex==\"woman\"),\n               aes(x = factor(town),\n                   y = totexp,\n                  fill = \"woman\")) +\n  geom_col(data = subset(dat, sex==\"man\"),\n               aes(x = factor(town),\n                   y = -totexp,\n                  fill = \"man\"))\n\n"}},{"node":{"name":"solution_06_07A","code":"library(ggplot2)\ndata(BudgetFood, package = \"Ecdat\")\n\nggplot(data = BudgetFood, \n       mapping = aes(x = totexp)) +\n  geom_histogram(aes(y = after_stat(density))) +\n  geom_density(color = \"red\")\n\n"}},{"node":{"name":"solution_06_07B","code":"library(ggplot2)\ndata(BudgetFood, package = \"Ecdat\")\n\nggplot(data = subset(BudgetFood, !is.na(sex)), \n       mapping = aes(x = sex,\n                     y = age)) +\n  geom_violin(aes(fill = sex)) +\n  geom_boxplot(width = 0.1) \n\n"}},{"node":{"name":"solution_06_07C","code":"library(ggplot2)\ndata(BudgetFood, package = \"Ecdat\")\n\nggplot(data = subset(BudgetFood, size < 30), \n       mapping = aes(x = size,\n                     y = totexp)) +\n  geom_point() +\n  geom_smooth(color = \"red\",\n                  method = loess,\n                  formula = y ~ x)\n\n"}},{"node":{"name":"solution_06_07D","code":"library(ggplot2)\ndata(BudgetFood, package = \"Ecdat\")\n\nggplot(data = subset(BudgetFood, !is.na(sex)), \n       mapping = aes(x = sex)) +\n  geom_bar() +\n  geom_text(aes(label = after_stat(count)),\n                 vjust = -0.3,\n                 stat = \"count\")\n\n"}},{"node":{"name":"solution_06_07E","code":"library(tidyverse)\ndata(BudgetFood, package = \"Ecdat\")\n\ndat <- BudgetFood %>% \n  filter(!is.na(sex)) %>% \n  group_by(town, sex) %>% \n  summarise(totexp = mean(totexp))\n\nggplot() +\n  geom_col(data = filter(dat, sex==\"woman\"),\n               aes(x = factor(town),\n                   y = totexp,\n                  fill = \"woman\")) +\n  geom_col(data = subset(dat, sex==\"man\"),\n               aes(x = factor(town),\n                   y = -totexp,\n                  fill = \"man\"))\n\n"}},{"node":{"name":"solution_06_09A","code":"library(ggplot2)\ndata(BudgetFood, package = \"Ecdat\")\n\n\n\nggplot(data = subset(BudgetFood, !is.na(sex)), \n       mapping = aes(x = sex,\n                     y = age)) +\n  geom_violin(aes(fill = sex)) + \n  scale_fill_manual(values = c(\"violet\", \"royalblue\"))\n  \n\n"}},{"node":{"name":"solution_06_09B","code":"library(ggplot2)\ndata(BudgetFood, package = \"Ecdat\")\n\n\nggplot(data = subset(BudgetFood, !is.na(sex)), \n       mapping = aes(x = totexp,\n                     fill = sex)) +\n  geom_histogram(bins = 40,\n                 aes(color = sex)) + \n  scale_x_log10() +\n  scale_color_discrete() +\n  scale_fill_brewer(palette = 10)\n  \n\n"}},{"node":{"name":"solution_06_11A","code":"library(tidyverse)\ndata(BudgetFood, package = \"Ecdat\")\n\nggplot(BudgetFood, aes(x = age)) + \n  geom_histogram(data = select(BudgetFood, -town),\n                 fill = \"grey\", binwidth = 1,\n                 aes(y = after_stat(density))) +\n  geom_histogram(aes(y = after_stat(density)),\n                 binwidth = 1) +\n  geom_density(color = \"red\") +\n  facet_wrap(~town)\n  \n"}},{"node":{"name":"solution_06_11B","code":"library(tidyverse)\ndata(BudgetFood, package = \"Ecdat\")\n\nggplot(subset(BudgetFood, !is.na(sex)), aes(age)) +\n  geom_histogram(aes(y = after_stat(density))) +\n  geom_text(x = 35, y = 0.035, \n            data = function(.data) .data %>% \n              group_by(sex, town) %>% \n              count(),\n            aes(label = n)) +\n  facet_grid(sex ~ town)\n\n"}},{"node":{"name":"solution_06_11C","code":"library(tidyverse)\nlibrary(patchwork)\ndata(BudgetFood, package = \"Ecdat\")\n\n\ng1 <- ggplot(BudgetFood, \n             aes(factor(size), wfood, color = sex)) +\n  geom_boxplot() \n\ng2 <- ggplot(BudgetFood, \n             aes(factor(size), totexp, color = sex)) +\n  geom_boxplot() + \n  scale_y_log10()\n\n# combine the plot as one figure \ng1 / g2 + plot_layout(guides = \"collect\")\n\n"}},{"node":{"name":"solution_06_13A","code":"library(tidyverse)\ndata(BudgetFood, package = \"Ecdat\")\n\nggplot(BudgetFood, aes(x = age)) + \n  geom_histogram(aes(y = after_stat(density)),\n                 binwidth = 1) +\n  geom_density(color = \"red\") +\n  facet_wrap(~town, labeller = label_both) +\n  labs(x = \"Age\", y = \"Density\", title = \"Age distribution by town size\") +\n  theme(text = element_text(size = 14, family = \"mono\"),\n        plot.background = element_rect(fill = \"grey80\"),\n        strip.background = element_rect(fill = \"black\"),\n        strip.text = element_text(color = \"white\"),\n        panel.background = element_rect(fill = \"white\",\n                                        color = \"black\"),\n        panel.grid = element_blank())\n\n"}},{"node":{"name":"solution_07_02A","code":"data(Cigarette, package = \"Ecdat\")\n\nfit <- lm(avgprs ~ taxs, data = Cigarette)\n  \nRSS <- sum(residuals(fit)^2)\nbeta0 <- coef(fit)[1]\nbeta1 <- coef(fit)[2]\n\n"}},{"node":{"name":"solution_07_04A","code":"data(Cigarette, package = \"Ecdat\")\n\nfit <- lm(avgprs ~ taxs + cpi, data = Cigarette)\n  \nRSS <- sum(residuals(fit)^2)\nbeta0 <- coef(fit)[1]\nbeta1 <- coef(fit)[2]\n\n"}},{"node":{"name":"solution_07_06A","code":"data(Cigarette, package = \"Ecdat\")\n\nfit <- lm(avgprs ~ -1 + state, data = Cigarette)\n  \nbetas <- coef(fit)\nbetas\n\n"}},{"node":{"name":"test_01_03","code":"test <- function() {\n    # Here we can either check objects created in the solution code, or the\n    # string value of the solution, available as .solution. See the testTemplate\n    # in the meta.json for details.\n    if (n != nrow(mtcars)) {\n        stop(\"Are you getting the correct length?\")\n    }\n    if (!grepl(\"mtcars$gear\", .solution, fixed = TRUE)) {\n        stop(\"Are you printing the correct variable?\")\n    }\n\n    # This function is defined in the testTemplate\n    success(\"Well done!\")\n}\n"}},{"node":{"name":"test_01_04","code":"test <- function() {\n    # Here we can either check objects created in the solution code, or the\n    # string value of the solution, available as .solution. See the testTemplate\n    # in the meta.json for details.\n    if (x != 6) {\n        stop(\"Are you using the correct numbers and symbols?\")\n    }\n\n    # This function is defined in the testTemplate\n    success(\"Well done!\")\n}\n"}},{"node":{"name":"test_02_01","code":"library(testthat)\n\ntest <- function() {\n    if (x != 25) {\n        stop(\"Are you using the correct numbers and symbols? Have you try the hint?\")\n    }\n    if (y != 75) {\n      stop(\"Are you using the correct numbers and symbols? Have you try the hint?\")\n    }\n    # This function is defined in the testTemplate\n    success(\"Well done!\")\n}\ntest()\n"}},{"node":{"name":"test_02_02","code":"library(testthat)\n\ntest <- function() {\n    if (weather != \"sunny\") {\n        stop(\"Have you spelt the string correctly? Have you try the hint?\")\n    }\n    if (brolly_needed != FALSE) {\n      stop(\"Have you spelt the logical value correctly? Note that logical values should be all capital letter (i.e. `TRUE` not `true`).\")\n    }\n    if (temperature != 27) {\n      stop(\"Have you assign the numeric correctly?\")\n    }\n    # This function is defined in the testTemplate\n    success(\"Well done!\")\n}\n\ntest()\n"}},{"node":{"name":"test_02_06","code":"library(testthat)\n\ntest <- function() {\n    S = matrix(c(1,0,0,1), byrow=TRUE, nrow=2)\n    T = matrix(c(2,2,4,3), byrow=TRUE, nrow=2)\n    if (M != rbind(S,T)) {\n        stop(\"This is incorrect. Are you using the function that we have introduced? Try the Hint!\")\n    }\n    if (part_of_M != M[1:3,2]) {\n      stop(\"Have you got the indexing right? Try the Hint!\")\n    }\n    # This function is defined in the testTemplate\n    success(\"Well done! You have mastered the basics of operating on matrices using R.\")\n}\ntest()\n\n"}},{"node":{"name":"test_02_07_01","code":"library(testthat)\n"}},{"node":{"name":"test_02_07_02","code":"library(testthat)\n"}},{"node":{"name":"test_02_07_03","code":"library(testthat)\n\ntest <- function() {\n    symbol <- c('N','O','H','He','B','C','F','Ne','Li','Be')\n    element <- c('Nitrogen','Oxygen','Hydrogen','Helium','Boron','Carbon','Fluorine','Neon','Lithium','Beryllium')\n    chemical_group <- c('Nonmetal','Nonmetal','Nonmetal','Noble Gas','Metalloid','Nonmetal','Halogen','Noble Gas','Alkali Metal','Alkaline Earth Metal')\n    atomic_no <- c(7,8,1,2,5,6,9,10,3,4)\n    if first_ten_elements != data.frame(symbol, element, chemical_group, atomic_no){\n      stop(\"Did you follow the order of columns as stated in the instruction?\" Try again.)\n    }\n    success(\"Well done!\")\n}\n\ntest()\n\n"}},{"node":{"name":"test_02_07_04","code":"library(testthat)\n  \ntest <- function() {\n\n    symbol <- c('N','O','H','He','B','C','F','Ne','Li','Be')\n    element <- c('Nitrogen','Oxygen','Hydrogen','Helium','Boron','Carbon','Fluorine','Neon','Lithium','Beryllium')\n    chemical_group <- c('Nonmetal','Nonmetal','Nonmetal','Noble Gas','Metalloid','Nonmetal','Halogen','Noble Gas','Alkali Metal','Alkaline Earth Metal')\n    atomic_no <- c(7,8,1,2,5,6,9,10,3,4)\n    first_ten_elements <- data.frame(symbol, element, chemical_group, atomic_no)\n    if sorted_df != first_ten_elements[order(first_ten_elements$atomic_no), ]{\n      stop(\"Did you follow the order of columns as stated in the instruction?\" Try again.)\n    }\n    success(\"Well done!\")\n}\n\n\n"}},{"node":{"name":"test_02_10_01","code":"library(testthat)\n  \ntest <- function() {\n  if my_result[5] != 0.00198{\n    stop(\"Try again.\")\n  }\n  success(\"Well done!\")\n}\n\n\n"}},{"node":{"name":"test_02_11_01","code":"library(testthat)\n\ntest <- function() {\n    if power_three(20) != 20^3{\n      stop(\"Did you correctly define the function power_three()? Check the function body. Are you taking the input argument to the power three?\")\n    }\n    success(\"Well done!\")\n}\n\ntest()\n"}},{"node":{"name":"test_02_11_02","code":"library(testthat)\n  \ntest <- function() {\n    if ((class(roll_a_die()) != \"integer\")|(roll_a_die()> 6)|(roll_a_die()<1)) {\n      stop(\"Is your function returning integers from 1 to 6 ? Check the body of the function.\")\n    }\n    success(\"Well done!\")\n}\n\ntest()\n\n"}},{"node":{"name":"test_06_05A","code":"library(testthat)\n  \ntest <- function() { \n  success(\"Check with the above target plot if the output matches!\") \n}\n\n"}},{"node":{"name":"test_06_05B","code":"library(testthat)\n  \ntest <- function() { \n  success(\"Check with the above target plot if the output matches!\") \n}\n"}},{"node":{"name":"test_06_05C","code":"library(testthat)\n  \ntest <- function() { \n  success(\"Check with the above target plot if the output matches!\") \n}\n"}},{"node":{"name":"test_06_05D","code":"library(testthat)\n  \ntest <- function() { \n  success(\"Check with the above target plot if the output matches!\") \n}\n"}},{"node":{"name":"test_06_05E","code":"library(testthat)\n  \ntest <- function() { \n  success(\"Check with the above target plot if the output matches!\") \n}\n\n"}},{"node":{"name":"test_06_05F","code":"library(testthat)\n  \ntest <- function() { \n  success(\"Check with the above target plot if the output matches!\") \n}\n    \n"}},{"node":{"name":"test_06_06B","code":"library(testthat)\n  \ntest <- function() { \n  success(\"Check with the above target plot if the output matches!\") \n}\n"}},{"node":{"name":"test_06_06C","code":"library(testthat)\n  \ntest <- function() { \n  success(\"Check with the above target plot if the output matches!\") \n}\n"}},{"node":{"name":"test_06_06D","code":"library(testthat)\n  \ntest <- function() { \n  success(\"Check with the above target plot if the output matches!\") \n}\n"}},{"node":{"name":"test_06_06E","code":"library(testthat)\n  \ntest <- function() { \n  success(\"Check with the above target plot if the output matches!\") \n}\n"}},{"node":{"name":"test_06_07A","code":"library(testthat)\n  \ntest <- function() { \n  success(\"Check with the above target plot if the output matches!\") \n}\n"}},{"node":{"name":"test_06_07B","code":"library(testthat)\n  \ntest <- function() { \n  success(\"Check with the above target plot if the output matches!\") \n}\n"}},{"node":{"name":"test_06_07C","code":"library(testthat)\n  \ntest <- function() { \n  success(\"Check with the above target plot if the output matches!\") \n}\n"}},{"node":{"name":"test_06_07D","code":"library(testthat)\n  \ntest <- function() { \n  success(\"Check with the above target plot if the output matches!\") \n}\n"}},{"node":{"name":"test_06_07E","code":"library(testthat)\n  \ntest <- function() { \n  success(\"Check with the above target plot if the output matches!\") \n}\n"}},{"node":{"name":"test_06_09A","code":"library(testthat)\n  \ntest <- function() { \n  success(\"Check with the above target plot if the output matches!\") \n}\n"}},{"node":{"name":"test_06_09B","code":"library(testthat)\n  \ntest <- function() { \n  success(\"Check with the above target plot if the output matches!\") \n}\n"}},{"node":{"name":"test_06_11A","code":"library(testthat)\n  \ntest <- function() { \n  success(\"Check with the above target plot if the output matches!\") \n}\n"}},{"node":{"name":"test_06_11B","code":"library(testthat)\n  \ntest <- function() { \n  success(\"Check with the above target plot if the output matches!\") \n}\n"}},{"node":{"name":"test_06_11C","code":"library(testthat)\n  \ntest <- function() { \n  success(\"Check with the above target plot if the output matches!\") \n}\n"}},{"node":{"name":"test_06_13A","code":"library(testthat)\n  \ntest <- function() { \n  success(\"Check with the above target plot if the output matches!\") \n}\n"}},{"node":{"name":"test_07_02A","code":"library(testthat)\n\ntest <- function() {\n  fit <- lm(avgprs ~ taxs, data = Cigarette)\n  expect_equal(RSS, sum(residuals(fit)^2))\n  expect_equal(beta0, coef(fit)[1])\n  expect_equal(beta1, coef(fit)[2])\n  success(\"Well done!\")\n}  \n  \n"}},{"node":{"name":"test_07_04A","code":"library(testthat)\n\ntest <- function() {\n  fit <- lm(avgprs ~ taxs, data = Cigarette)\n  expect_equal(RSS, sum(residuals(fit)^2))\n  expect_equal(beta0, coef(fit)[1])\n  expect_equal(beta1, coef(fit)[2])\n}  \n  \n"}},{"node":{"name":"test_07_06A","code":"library(testthat)\n\ntest <- function() {\n  fit <- lm(avgprs ~ -1 + state, data = Cigarette)\n  expect_equal(betas, coef(fit))\n  success(\"You got it right! Did you notice what the `betas` values are?\")\n}  \n  \n"}}]}}}