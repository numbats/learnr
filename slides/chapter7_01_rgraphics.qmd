---
title: R Graphics

format: 
  revealjs:
    #self-contained: true
    logo: images/monash-stacked-blue-rgb-transparent.png
    slide-number: true
    show-slide-number: all
    controls: true
    width: 1280
    height: 720
---

```{r setup, include = FALSE}
knitr::opts_chunk$set(fig.path = "images/chapter7-01/",
                      fig.align = "center",
                      fig.width = 4, 
                      fig.height = 4,
                      cache.path = "cache/",
                      cache = FALSE,
                      echo = TRUE,
                      message = FALSE, 
                      warning = FALSE)
library(tidyverse)
library(ozmaps)
covid <- read_csv("data/tidycovid19-20220123.csv")
oz_sf <- ozmap_data("states")
```


## Why data visualisation?

<blockquote>
A picture is worth a thousand words
</blockquote>

* Data visualisation is a powerful tool to **_explore_**, **_understand_** and **_communicate_** data

```{r covid-plot, echo = FALSE, fig.width = 10, fig.height = 3, cache = FALSE}
covid %>% 
  mutate(case = (1 + confirmed - lag(confirmed, 1))) %>% 
  ggplot(aes(date, case)) +
  geom_line() + 
  scale_y_log10(labels = scales::comma) + 
  labs(x = "Date", y = "Number of cases + 1",
       title = "COVID-19 cases in Australia") +
  theme_classic(base_size = 18) +
  theme(plot.title.position = "plot")
```

Note: What do you notice from the number of COVID-19 cases from the graph? Is this easy to see from the table below?

```{r, echo = FALSE}
covid %>% 
  mutate(case = (1 + confirmed - lag(confirmed, 1))) %>% 
  select(date, case) %>% 
  filter(!is.na(case)) %>% 
  knitr::kable()
```


---


## A data visualisation catalogue

```{r datavis-catalogue, fig.width = 1.8, fig.height = 1.8, echo = FALSE, fig.show='hide'}
set.seed(1)
n1 <- 200
df1 <- tibble(x = runif(n1, 0, 10),
              y =  3 * x + rnorm(n1, 0, 10),
              z = rnorm(n1, 0, 2),
              g1 = sample(letters[1:4], size = n1, replace = TRUE),
              g2 = sample(letters[1:4], size = n1, replace = TRUE)) %>% 
  mutate(g1 = fct_reorder(g1, y, sum))
df2 <- diamonds %>% 
  sample_n(80)
df3 <- ToothGrowth %>% 
  mutate(dosef = factor(dose)) %>% 
  group_by(dosef, supp) %>% 
  summarise(mlen = factor(mean(len)))
sumdf1 <- df1 %>% 
  group_by(g1) %>% 
  summarise(y = sum(y))
sumdf2 <- df1 %>% 
  group_by(g1, g2) %>% 
  summarise(y = sum(y))
# generate 5 from colorspace and discard the tails which are too white
reds <- c("#7F000D", "#A9565A", "#CA9496", "#E2CBCB")
yellows <- c("#6A3F00", "#97742F", "#BAA588", "#D4CCC3")
green <- "#006400"
purples <- c("#312271", "#4F4293", "#6D60BB", "#8B80D1", "#A79FE1", "#C2BCF0", 
"#DAD6FA", "#EDEBFF", "#F9F9F9")

theme_base <- list(theme_void(base_size = 18) + 
  theme(plot.margin = margin(10, 10, 10, 10),
        plot.title.position = "plot",
        plot.title = element_text(margin = margin(t = -4, b = 10),
                                  size = 14, face = "bold")),
  guides(fill = "none"))

theme_rank <- c(theme_base,
                list(theme(plot.background = element_rect(fill = "#DCBFC9", 
                                       color = NA)),
                     scale_fill_manual(values = reds)))

theme_corr <- c(theme_base,
                list(theme(plot.background = element_rect(fill = "#EDDBB6", 
                                       color = NA))))

theme_dist <- c(theme_base,
                list(theme(plot.background = element_rect(fill = "#D7FBCD", 
                                       color = NA))))

theme_other <- c(theme_base,
                list(theme(plot.background = element_rect(fill = "#FFE5FF", 
                                       color = NA)),
                     scale_fill_manual(values = purples)))




theme_yaxis <- theme(axis.line.y = element_line(color = "black", size = 1),
                     axis.ticks.y = element_line(color = "black", 
                                                 linetype = "solid", 
                                                 size = 1, 
                                                 lineend = NULL),
                     axis.ticks.length.y = unit(0.3, "lines"))


theme_xaxis <- theme(axis.line.x = element_line(color = "black", size = 1),
                     axis.ticks.x = element_line(color = "black", 
                                                 linetype = "solid", 
                                                 size = 1, 
                                                 lineend = NULL),
                     axis.ticks.length.x = unit(0.3, "lines"))

theme_border <- theme(plot.background = element_rect(color = "black",
                                                     size = 3))

ggplot(sumdf1, aes(g1, y)) +
  geom_col(fill = reds[1]) +
  theme_rank +
  theme_yaxis +
  theme_border +
  ggtitle("BARPLOT") 

ggplot(sumdf1, aes("", y, fill = g1)) +
  geom_col(position = "fill") +
  theme_rank +
  theme_border +
  ggtitle("PIE CHART") + 
  coord_polar("y") +
  theme(plot.margin = margin(t=20, b=20, l=17, r=17),
        plot.title = element_text(margin = margin(t = -13, l = -20))) 

ggplot(sumdf2, aes(g1, y, fill = g2)) +
  geom_col() +
  theme_rank +
  theme_yaxis +
  theme_border +
  ggtitle("STACKED\nBARPLOT") 

ggplot(sumdf2, aes(g1, y, fill = g2)) +
  geom_col(position = "dodge") +
  theme_rank +
  theme_yaxis + 
  theme_border +
  ggtitle("GROUPED\nBARPLOT") 

ggplot(sumdf2, aes(g1, y, fill = g2)) +
  geom_col(position = "fill") +
  theme_rank +
  theme_yaxis +
  theme_border +
  ggtitle("STACKED\nPERCENTAGE\nBARPLOT")

ggplot(faithful, aes(eruptions)) +
  geom_histogram(fill = green, bins = 10, color = "white") + 
  theme_dist +
  theme_xaxis + 
  theme_yaxis +
  theme_border +
  ggtitle("HISTOGRAM") 

ggplot(faithful, aes(eruptions)) +
  geom_density(fill = green, color = NA) + 
  theme_dist +
  theme_xaxis + 
  theme_yaxis +
  theme_border +
  ggtitle("DENSITY PLOT") 

ggplot(faithful, aes(eruptions, "")) +
  geom_boxplot(fill = "white", color = green, width = 0.3) + 
  theme_dist +
  theme_xaxis + 
  theme_border +
  ggtitle("BOXPLOT") 

ggplot(faithful, aes(eruptions, "")) +
  geom_violin(fill = green) + 
  theme_dist +
  theme_xaxis + 
  theme_border +
  ggtitle("VIOLIN PLOT") 

ggplot(faithful, aes(eruptions)) +
  geom_dotplot(fill = green) + 
  theme_dist +
  theme_xaxis + 
  theme_border +
  ggtitle("DOT PLOT") 

ggplot(df2, aes(carat, price)) +
  geom_point(color = yellows[1]) +
  theme_corr +
  theme_yaxis +
  theme_xaxis +
  theme_border +
  ggtitle("SCATTER PLOT")

ggplot(df2, aes(carat, price, size = depth)) +
  geom_point(color = yellows[1], alpha = 0.3) +
  theme_corr +
  theme_yaxis +
  theme_xaxis +
  theme_border +
  ggtitle("BUBBLE CHART") + guides(size = "none")

ggplot(economics, aes(date, uempmed)) +
  geom_line(color = yellows[1]) +
  theme_corr +
  theme_yaxis +
  theme_xaxis +
  theme_border +
  ggtitle("LINE PLOT") 

ggplot(df3, aes(dosef, supp, fill = mlen)) +
  geom_tile(color = "black", size = 1.2) +
  theme_other + 
  theme_border +
  ggtitle("HEATMAP") 

oz_sf %>% 
  mutate(value = factor(rnorm(n()))) %>% 
  ggplot(aes(fill = value)) + 
  geom_sf() + 
  theme_other + 
  theme_border +
  ggtitle("CHOROPLETH\nMAP") 
```

`r x<-1:15;paste(glue::glue('<img  src="images/chapter7-01/datavis-catalogue-{x}.png"/>'), collapse = "")`


Note: 

* There are a large range of choices to visualise your data. 
* The data visualisation catalogue shown here is not exhaustive.
* A good data visualisation depends on a number of factors, including the context of the data.
* We'll give you some tips along the way but you shouldn't take them to be prescriptive.
* The most important thing is to **plot many graphs for your data** -- you never know what you will uncover by looking at different views of your data!

---

## Graphics üñºÔ∏è

* Graphics are commonly stored in a standard image format such as **svg**, **jpg** (or **jpeg**), **png**, **pdf**, and so on. 
* When you view these graphics electronically, you would be using some graphical device to render the stored image. 
* In R, the graphic is rendered by the graphical engine, `grDevices` (one of the core R package).

Note: 

* A core R package means that the package is already pre-installed in a standard installation of R. 
* This means that you do not need to install `grDevices` if you already installed R. 

---

## Graphics model in R 

* Two main graphics model in R are implemented via two core packages: 
    * `graphics` package, and
    * `grid` package.
* Plot using the `graphics` system is normally referred to as the **base graphics**.
* If the graphics is produced using the `grid` package, then it is using the **`grid` graphics** model.

Note: 

* Remember core package means that the packages are already pre-installed in R -- you do not need to install `graphics` and `grid` packages.
* The `graphics` package is loaded when you launch R so there is no need to load this.
* The `grid` package is _not_ automatically loaded so you need to use `library(grid)` to load the functions within it. 
* You won't use the `grid` package directly in a typical data visualisation. 

---

## Base graphics

* Base graphics are drawn via the `graphics` package.

<img src="images/base-graphics.png" width="50%">

Note: 

* Functions like `plot()`, `barplot()`, `hist()` usually produce base graphics. 
* Base graphics draw a **complete plot** straight to the canvas (i.e. the graphical device).
* There are some low-level base graphics functions like `legend()` and `abline()` that draws a small segment of the plot but these are drawn on top of an existing complete plot.
* We'll only briefly cover base plots -- most of the plots are expected to be drawn using `ggplot2`. 

---

## `grid` graphics

* The `grid` package contains low-level functions, i.e. draws only parts of the plot.
* This system gives a lot of control over the graphics, but requires the user to do a lot of work to draw a complete plot.
* You won't be directly interacting with the `grid` package.
* Instead you'll be using the **`ggplot2` package** that provides high-level functions for plotting via the `grid` system.

Note:

* Below is a demo of the `grid` package.
* It's not designed to easily draw a complete plot.

`library(grid)`

`grid.circle()`


```{r, echo = FALSE, fig.height = 2, fig.height = 2}
library(grid)
grid.circle()
```

`grid.newpage()`

`grid.rect()`


```{r, echo = FALSE, fig.height = 2, fig.height = 2}
grid.newpage()
grid.rect()
```


---

## Other graphical systems

* All other graphical systems are provided via contributed packages (i.e. you need to install it once to use it).
* The two most well known packages are:
   * `lattice` and 
   * `ggplot2`. 
* Both of these packages use the `grid` package to draw the plots.

Note: 

* You'll probably come across more graphical systems in your journey in learning R!
* R also offers a range of interactive graphics, e.g. `plotly`, and animated graphs, e.g. `gganimate`. We won't be delving in these though!



---

## Summary of R graphics

![](images/r-graphics-system.png)
Note: 

* There are two main graphics model in R: base and grid graphics.
* All graphics are rendered using `grDevices` to your graphical devices.
* `ggplot2` is a convenient framework to draw complete plots using the `grid` graphics system.
* `ggplot2` is one of the most popular packages in R for data visualisation and widely used in scientific outputs, reports, and even news articles.
* In the following lessons we'll focus only on learning to plot with the `ggplot2` package.

