---
title: R Graphics
execute:
  keep-md: true
format: 
  revealjs:
    #self-contained: true
    logo: images/monash-stacked-blue-rgb-transparent.png
    slide-number: true
    show-slide-number: all
    # below doesn't seem to be working
    #width: wide
type: slides
---

```{r setup, include = FALSE}
knitr::opts_chunk$set(fig.path = "images/chapter7-01/",
                      fig.align = "center",
                      fig.width = 4, 
                      fig.height = 4,
                      cache.path = "cache/",
                      cache = FALSE,
                      echo = TRUE)
library(tidyverse)
library(ozmaps)
covid <- read_csv("data/tidycovid19-20220123.csv")
oz_sf <- ozmap_data("states")
```


## Why data visualisation?

<blockquote>
A picture is worth a thousand words
</blockquote>

* Data visualisation is a powerful tool to **_explore_**, **_understand_** and **_communicate_** data

```{r covid-plot, echo = FALSE, fig.width = 10, cache = FALSE}
covid %>% 
  mutate(case = (1 + confirmed - lag(confirmed, 1))) %>% 
  ggplot(aes(date, case)) +
  geom_line() + 
  scale_y_log10(labels = scales::comma) + 
  labs(x = "Date", y = "Number of cases + 1",
       title = "COVID-19 cases in Australia") +
  theme_classic(base_size = 18) +
  theme(plot.title.position = "plot")
```

---


## A data visualisation catalogue

```{r datavis-catalogue, fig.width = 1.8, fig.height = 1.8, echo = FALSE, fig.show='hide'}
set.seed(1)
n1 <- 200
df1 <- tibble(x = runif(n1, 0, 10),
              y =  3 * x + rnorm(n1, 0, 10),
              z = rnorm(n1, 0, 2),
              g1 = sample(letters[1:4], size = n1, replace = TRUE),
              g2 = sample(letters[1:4], size = n1, replace = TRUE)) %>% 
  mutate(g1 = fct_reorder(g1, y, sum))
df2 <- diamonds %>% 
  sample_n(80)
df3 <- ToothGrowth %>% 
  mutate(dosef = factor(dose)) %>% 
  group_by(dosef, supp) %>% 
  summarise(mlen = factor(mean(len)))
sumdf1 <- df1 %>% 
  group_by(g1) %>% 
  summarise(y = sum(y))
sumdf2 <- df1 %>% 
  group_by(g1, g2) %>% 
  summarise(y = sum(y))
# generate 5 from colorspace and discard the tails which are too white
reds <- c("#7F000D", "#A9565A", "#CA9496", "#E2CBCB")
yellows <- c("#6A3F00", "#97742F", "#BAA588", "#D4CCC3")
green <- "#006400"
purples <- c("#312271", "#4F4293", "#6D60BB", "#8B80D1", "#A79FE1", "#C2BCF0", 
"#DAD6FA", "#EDEBFF", "#F9F9F9")

theme_base <- list(theme_void(base_size = 18) + 
  theme(plot.margin = margin(10, 10, 10, 10),
        plot.title.position = "plot",
        plot.title = element_text(margin = margin(t = -4, b = 10),
                                  size = 14, face = "bold")),
  guides(fill = "none"))

theme_rank <- c(theme_base,
                list(theme(plot.background = element_rect(fill = "#DCBFC9", 
                                       color = NA)),
                     scale_fill_manual(values = reds)))

theme_corr <- c(theme_base,
                list(theme(plot.background = element_rect(fill = "#EDDBB6", 
                                       color = NA))))

theme_dist <- c(theme_base,
                list(theme(plot.background = element_rect(fill = "#D7FBCD", 
                                       color = NA))))

theme_other <- c(theme_base,
                list(theme(plot.background = element_rect(fill = "#FFE5FF", 
                                       color = NA)),
                     scale_fill_manual(values = purples)))




theme_yaxis <- theme(axis.line.y = element_line(color = "black", size = 1),
                     axis.ticks.y = element_line(color = "black", 
                                                 linetype = "solid", 
                                                 size = 1, 
                                                 lineend = NULL),
                     axis.ticks.length.y = unit(0.3, "lines"))


theme_xaxis <- theme(axis.line.x = element_line(color = "black", size = 1),
                     axis.ticks.x = element_line(color = "black", 
                                                 linetype = "solid", 
                                                 size = 1, 
                                                 lineend = NULL),
                     axis.ticks.length.x = unit(0.3, "lines"))

ggplot(sumdf1, aes(g1, y)) +
  geom_col(fill = reds[1]) +
  theme_rank +
  theme_yaxis +
  ggtitle("BARPLOT") 

ggplot(sumdf1, aes("", y, fill = g1)) +
  geom_col(position = "fill") +
  theme_rank +
  ggtitle("PIE CHART") + 
  coord_polar("y") +
  theme(plot.margin = margin(t=20, b=20, l=17, r=17),
        plot.title = element_text(margin = margin(t = -13, l = -20))) 

ggplot(sumdf2, aes(g1, y, fill = g2)) +
  geom_col() +
  theme_rank +
  theme_yaxis +
  ggtitle("STACKED\nBARPLOT") 

ggplot(sumdf2, aes(g1, y, fill = g2)) +
  geom_col(position = "dodge") +
  theme_rank +
  theme_yaxis + 
  ggtitle("GROUPED\nBARPLOT") 

ggplot(sumdf2, aes(g1, y, fill = g2)) +
  geom_col(position = "fill") +
  theme_rank +
  theme_yaxis +
  ggtitle("STACKED\nPERCENTAGE\nBARPLOT")

ggplot(faithful, aes(eruptions)) +
  geom_histogram(fill = green, bins = 10, color = "white") + 
  theme_dist +
  theme_xaxis + 
  theme_yaxis +
  ggtitle("HISTOGRAM") 

ggplot(faithful, aes(eruptions)) +
  geom_density(fill = green, color = NA) + 
  theme_dist +
  theme_xaxis + 
  theme_yaxis +
  ggtitle("DENSITY PLOT") 

ggplot(faithful, aes(eruptions, "")) +
  geom_boxplot(fill = "white", color = green, width = 0.3) + 
  theme_dist +
  theme_xaxis + 
  ggtitle("BOXPLOT") 

ggplot(faithful, aes(eruptions, "")) +
  geom_violin(fill = green) + 
  theme_dist +
  theme_xaxis + 
  ggtitle("VIOLIN PLOT") 

ggplot(faithful, aes(eruptions)) +
  geom_dotplot(fill = green) + 
  theme_dist +
  theme_xaxis + 
  ggtitle("DOT PLOT") 

ggplot(df2, aes(carat, price)) +
  geom_point(color = yellows[1]) +
  theme_corr +
  theme_yaxis +
  theme_xaxis +
  ggtitle("SCATTER PLOT")

ggplot(df2, aes(carat, price, size = depth)) +
  geom_point(color = yellows[1], alpha = 0.3) +
  theme_corr +
  theme_yaxis +
  theme_xaxis +
  ggtitle("BUBBLE CHART") + guides(size = "none")

ggplot(economics, aes(date, uempmed)) +
  geom_line(color = yellows[1]) +
  theme_corr +
  theme_yaxis +
  theme_xaxis +
  ggtitle("LINE PLOT") 

ggplot(df3, aes(dosef, supp, fill = mlen)) +
  geom_tile(color = "black", size = 1.2) +
  theme_other + 
  ggtitle("HEATMAP") 

oz_sf %>% 
  mutate(value = factor(rnorm(n()))) %>% 
  ggplot(aes(fill = value)) + 
  geom_sf() + 
  theme_other + 
  ggtitle("CHOROPLETH\nMAP") 
```
```{css, echo = FALSE}
.catalogue img {
  margin-right: 20px;
  margin-top: 0px;
  margin-bottom: 0px;
  width: 18%;
}
```

<div class="catalogue">
`r x<-1:15;paste(glue::glue('<img src="images/chapter7-01/datavis-catalogue-{x}.png"/>'), collapse = "")`
</div>


---

## Graphics

* Graphics are commonly stored in a standard image format such as svg, jpg, png, pdf, and so on. 
* When you view these graphics electronically, you would be using some graphical device to render the stored image. 
* R would render these using either `windows`, `X11` or `quartz` graphical devices (depending on the your operating system).
* This rendering is carried out by R's graphics engine, `grDevices`, which is one of the core package within the R system.



---

## Graphics model in R 

* There are two main graphics model in R through two core packages: 
    * `graphics` package, and
    * `grid` package.
* The `graphics` package is loaded when you launch R so there is no need to load this.
* Plot using the `graphics` system is normally refered to as the **base graphics**.
* If the graphics is produced using the `grid` package, then it is using the **`grid` graphics** model.

---

## Base graphics

* Base graphics are drawn via the `graphics` package.

![](images/base-graphics.png)

---

## Base graphics

* Base functions generally draw a complete plot.

```{r simple-base-plot}
x <- 1:10
plot(x, x^2)
```
---

## `grid` graphics

* The `grid` package contains low-level graphics system.
* This system gives a lot of control over the graphics, but requires the user to do a lot of work.
* You won't be directly interacting with the `grid` package.
* Instead you'll be using the **`ggplot2` package** that provides high-level functions for plotting via the `grid` system.

---

## Other graphics system

* All other graphics system are provided via contributed packages (i.e. you need to install it once to use it).
* The two most well known systems are the `lattice` and `ggplot2` graphics that make use of the `grid` package.

---

## `grid` graphics


![](images/ggplot-graphics.png)


---

## R Graphics

![](images/r-graphics-system.png)

---

## Plotting with R (base version)
```{r}
data <- data.frame(duty = c("Teaching", "Research", "Engagement"),
                   perc = c(40, 40, 20))
```
::: columns

::: {.column width="25%"}

```{r}
data
```


:::
::: {.column width="60%"}

```{r base-barplot, fig.width = 7}
barplot(perc ~ duty,
        data = data)
```
:::

:::

---

## Plotting with R (ggplot2 version)
```{r}
data <- data.frame(duty = c("Teaching", "Research", "Engagement"),
                   perc = c(40, 40, 20))
```
::: columns

::: {.column width="25%"}

```{r}
data
```


:::
::: {.column width="60%"}

```{r ggplot-barplot, fig.width = 7, cache = FALSE}
library(ggplot2)
ggplot(data = data, 
       mapping = aes(x = duty, 
                     y = perc)) +
  geom_col()
```
:::

:::


---

## `ggplot2` graphics

* In the following lessons we'll focus only on learning to plot with the `ggplot2` package.
* It is one of the most popular packages in R for data visualisation and widely used in scientific outputs, reports, and even news articles.
