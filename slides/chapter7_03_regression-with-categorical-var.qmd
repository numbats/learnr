---
title: Linear regression with categorical variables
#execute:
#  keep-md: true
format: 
  #teachr::teachr_slides:
  revealjs:
    #self-contained: true
    logo: images/monash-stacked-blue-rgb-transparent.png
    slide-number: true
    show-slide-number: all
    controls: true
    width: 1280
    height: 720
---

```{r setup, include = FALSE}
knitr::opts_chunk$set(#fig.path = "images/chapter8-02/",
                      fig.align = "center",
                      fig.width = 10, 
                      fig.height = 4,
                      cache.path = "cache/",
                      cache = FALSE,
                      echo = TRUE)
library(tidyverse)
library(broom)
library(grid)
library(patchwork)
```



## Tooth growth data

* We'll now use the `ToothGrowth` data to illustrate a model with a categorical variable:

```{r}
str(ToothGrowth)
```


  

Notes:

* `ToothGrowth` contains observations on 60 guinea pigs with variables:
  * `len`: the tooth length
  * `supp`: supplement type (VC = vitamin C, OJ = orange juice)
  * `dose`: dose of supplement in milligrams/days

```{r toothgrowth-plot, echo = FALSE, fig.width = 5}
ggplot(ToothGrowth, aes(supp, len, color = factor(dose))) + 
  ggbeeswarm::geom_quasirandom() +
  labs(x = "Supplement", y = "Tooth length", color = "Dose (mg/day)") +
  scale_color_viridis_d(option = "C")
```



---

## Categorical variable in `lm`: illustration

* `supp` is a factor with two levels: "VC" and "OJ"
* What model are we fitting below?

```{r}
fit1s <- lm(len ~ 1 + as.numeric(supp=="VC"), 
            data = ToothGrowth)
```

$$\color{#006dae}{y_{ijk}} = \beta_0\cdot \color{#006dae}{1} + \beta_1 \color{#006dae}{x_{i}}+ e_{ijk},$$
$$\text{for }i = 1, 2, j = 1, 2, 3, k = 1, ..., 10.$$
Notes:

where

* $i$ corresponds to the level of the supplementary variable,
* $j$ corresponds to the dose level,
* $k$ corresponds to the replicate number,
* $x_i = 0$ if $i = 1$ (OJ) and $x_i = 1$ if $i = 2$ (VC),
* $y_{ijk}$ is the tooth length, and 
* we assume $e_{ijk} \sim N(0, \sigma^2)$. 

---

## Categorical variable in `lm`: actual

* Alternatively, we fit the categorical variable directly:

```{r}
fit2s <- lm(len ~ supp, data = ToothGrowth)
```

* Above model is the equivalent as `fit1s`:

```{r}
coef(fit1s)
coef(fit2s)
```

Notes:

* Instead of creating dummy variables, like $x_{1i}$, for a categorical variable, it is more convenient to use the categorical variable directly in the symbolic model formula.
* By default `lm` uses the treatment constraint (`?contr.treatment`), i.e. first level of the categorical variable is omitted (which is the same as constraining the corresponding coefficient to zero).  

---

## Predicted values

$$\widehat{\texttt{len}} = 20.66 - 3.7 \cdot \texttt{supp}_{\texttt{VC}}$$


* There are only two possible response values from this model:

```{r}
predict(fit2s, data.frame(supp = c("OJ", "VC")))
```

* Under this model, the average tooth length of a guinea pig with orange juice supplement is 20.66 units and with vitamin C is 16.96 units. 


Notes:

```{r toothgrowth-plot2, echo = FALSE, fig.width = 5}
pred <- data.frame(supp = c("OJ", "VC"),
                   len = predict(fit2s, data.frame(supp = c("OJ", "VC"))))
ggplot(ToothGrowth, aes(supp, len, color = factor(dose))) + 
  ggbeeswarm::geom_quasirandom() +
  labs(x = "Supplement", y = "Tooth length", color = "Dose (mg/day)") +
  scale_color_viridis_d(option = "C") +
  geom_point(data = pred, color = "indianred", size = 3, shape = 10) +
  geom_segment(data = data.frame(x = c(-Inf, -Inf),
                                 xend = c(1, 2),
                                 y = c(pred$len[1], pred$len[2]),
                                 yend = c(pred$len[1], pred$len[2])),
               aes(x = x, xend = xend, y = y, yend = yend),
               color = "indianred", linetype = "dashed")
```

* Is this a reasonable model though?


---

## Numerical categorical variable

* Recall that `dose` is coded as a *numerical* variable with three possible values: 0.5, 1, and 2.

* Different encoding results in different fitted models:

```{r}
fit1 <- lm(len ~ dose, data = ToothGrowth)
coef(fit1)
```

```{r}
fit2 <- lm(len ~ dose, data = mutate(ToothGrowth, dose = factor(dose)))
coef(fit2)
```

Notes:

* It's the user's responsibility to be aware of what model is fitted and being able to interpret the models appropriately.
* Please consult standard first year statistics text books for interpreting models -- we only teach you how to fit models in R but statistical theory is beyond the scope of these materials.



---

## Summary

* You can add categorical variables in the symbolic model formulae instead of creating a set of dummy variables.
* The fitted model changes based on whether the variable is encoded as numerical or factor/character -- as a user, you need to make sure you understand/check what model you are fitting.
